%h1 Block Challenges

%p
  A block is a piece of code that can be executed later.
  Its behaviour is very very similar to a method's.
  You will know when you see a block, because it is always passed to a method,
  and it has either curly braces or <code>do/end</code> wrapped around it.
  Like <code>{ this }</code> and like <code>do this end</code>.

%h2 Passing/calling a block

%p
  We pass a block to our code the same way we pass it to
  <code>#each</code> and <code>#map</code>
  and anywhere else that you've seen a block.

%p
  We receive the block with an ampersand.
  You can think of it like "& I'd like a block".

%p
  We invoke the block with <code>#call</code>.
  In the same way we can call a method and pass it arguments,
  we can pass arguments to the block by passing them to <code>#call</code>.

.interactive-code
  :plain
    class MahClass
      def gimme_numbahz(&block)
        block.call 123
        block.call 456
        block.call 789
      end
    end

    ary = [1, 2, 3]
    ary.each do |n|
      puts "Array#each gave me: \#{n}"
    end

    mah_instance = MahClass.new
    mah_instance.gimme_numbahz do |n|
      puts "One of mah numbahz: \#{n}"
    end
